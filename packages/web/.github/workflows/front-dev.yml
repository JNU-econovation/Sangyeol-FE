name: Deploy to Amazon ECS

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: soop/dev-frontend
  ECS_CLUSTER: soop-dev-cluster
  ECS_SERVICE: soop-dev-front-test-service
  ECS_TASK_DEFINITION: .github/ecs/task-definition.json
  CONTAINER_NAME: application

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Send Slack start_message
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ develop 브랜치에 코드가 push 되었습니다. 프론트 배포를 시작합니다!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-        

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > .env
          echo "NEXT_PUBLIC_NAVER_KEY=${{ secrets.NEXT_PUBLIC_NAVER_KEY }}" >> .env
          echo "NEXT_PUBLIC_NAVER_SECRET=${{ secrets.NEXT_PUBLIC_NAVER_SECRET }}" >> .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx create --use --driver docker-container
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --push .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send Slack complete_message
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ 프론트 배포가 완료되었습니다!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}          
